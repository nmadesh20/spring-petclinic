# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# test run for Docker auto build

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
#- task: WhiteSource@21
#  inputs:
#    cwd: '$(System.DefaultWorkingDirectory)'
#    projectName: 'DevOpsTestProject'
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    publishLocation: 'pipeline'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      cd $(Build.ArtifactStagingDirectory)
      ls -lrt
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(build.artifactstagingdirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
- task: AzureFunctionApp@1
  displayName: Azure Function App deploy
  inputs:
    azureSubscription: 'Pay As You Go (069964e3-0984-4087-b45f-560653532e2d)'
    appType: 'functionApp'
    appName: 'myjavaApp02212022'
    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    deploymentMethod: zipDeploy
- task: JFrogGenericArtifacts@1
  inputs:
    command: 'Upload'
    connection: 'JFrog Artifactory2'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.SourcesDirectory)/target/*jar",
            "target": "javauploaddownload/javauploaddownload/${Build.BuildId}/"
          }
        ]
      }
    failNoOp: true
