# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# test run for Docker auto build

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: WhiteSource@21
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)'
    projectName: 'DevOpsTestProject'
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'app-sonar2706'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'DevOpsTestProject'
    cliSources: '.'
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    publishLocation: 'pipeline'
- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: JFrogGenericArtifacts@1
  inputs:
    command: 'Upload'
    connection: 'JFrog Artifactory2'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.SourcesDirectory)/target/*jar",
            "target": "javauploaddownload/javauploaddownload/artiupload/"
          }
        ]
      }
    failNoOp: true
